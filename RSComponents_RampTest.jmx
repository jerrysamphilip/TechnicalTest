<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Ramp Test Plan" enabled="true">
      <stringProp name="TestPlan.comments">RS Componentsâ€™ Irish Website ramp test plan</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BASE_URL_1" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_1</stringProp>
            <stringProp name="Argument.value">ie.rs-online.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_2" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_2</stringProp>
            <stringProp name="Argument.value">mboxedge37.tt.omtrdc.net</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <boolProp name="HTTPSampler.image_parser">true</boolProp>
        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
        <collectionProp name="DNSCacheManager.servers"/>
        <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
        <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
      </DNSCacheManager>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list"/>
        <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
      </AuthManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Concurrency Thread Group" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">20</stringProp>
        <stringProp name="RampUp">60</stringProp>
        <stringProp name="Steps">5</stringProp>
        <stringProp name="Hold">1300</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">S</stringProp>
        <stringProp name="TestPlan.comments">To Ramp test of e-commerce website</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <kg.apc.jmeter.timers.VariableThroughputTimer guiclass="kg.apc.jmeter.timers.VariableThroughputTimerGui" testclass="kg.apc.jmeter.timers.VariableThroughputTimer" testname="jp@gc - Throughput Shaping Timer" enabled="true">
          <collectionProp name="load_profile">
            <collectionProp name="1291551733">
              <stringProp name="47605">0.3</stringProp>
              <stringProp name="47605">0.3</stringProp>
              <stringProp name="49772">260</stringProp>
            </collectionProp>
            <collectionProp name="1291594816">
              <stringProp name="47608">0.6</stringProp>
              <stringProp name="47608">0.6</stringProp>
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <collectionProp name="1292478688">
              <stringProp name="47611">0.9</stringProp>
              <stringProp name="47611">0.9</stringProp>
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <collectionProp name="-1937529984">
              <stringProp name="48565">1.2</stringProp>
              <stringProp name="48565">1.2</stringProp>
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <collectionProp name="-1937416896">
              <stringProp name="48568">1.5</stringProp>
              <stringProp name="48568">1.5</stringProp>
              <stringProp name="49586">200</stringProp>
            </collectionProp>
          </collectionProp>
        </kg.apc.jmeter.timers.VariableThroughputTimer>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">D:/RS Components/rs-compo-category.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">Category1, Category2, Category3</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Website Transaction Controller" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Homepage " enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">5000</stringProp>
              <stringProp name="ConstantTimer.delay">8000</stringProp>
              <stringProp name="TestPlan.comments">Recorded time was 0 milliseconds</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage - Load" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">web/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1482605639">My Account</stringProp>
                  <stringProp name="36787574">Glenview Industrial Estate, Herberton Road, Rialto, Dublin 12, Ireland.</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">Failed match Homepage</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage - MiniBasket" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">web/miniBasketRunningTotal.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage - MiniBasket" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">web/miniBasketRunningTotal.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic TW9iaWxlV2ViOmVtcHR5</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage - Recommendation" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="mboxPage" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxPage</stringProp>
                    <stringProp name="Argument.value">5ce039e3e2024aee97e0302d9a00e022</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="mboxMCSDID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxMCSDID</stringProp>
                    <stringProp name="Argument.value">3ABE16B2EBE76351-27E4C66A22EF953D</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="screenWidth" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">screenWidth</stringProp>
                    <stringProp name="Argument.value">1280</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="mboxTime" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxTime</stringProp>
                    <stringProp name="Argument.value">1611405916754</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="page.type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">page.type</stringProp>
                    <stringProp name="Argument.value">new l1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="mboxSession" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxSession</stringProp>
                    <stringProp name="Argument.value">8e3e00e2b1e64b16813036a3a04e9bd0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="mboxURL" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">mboxURL</stringProp>
                    <stringProp name="Argument.value">https://ie.rs-online.com/web/c/batteries-chargers/</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="webGLRenderer" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">webGLRenderer</stringProp>
                    <stringProp name="Argument.value">ANGLE (Intel(R) HD Graphics Family Direct3D11 vs_5_0 ps_5_0)</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="platform.localeCountry" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">platform.localeCountry</stringProp>
                    <stringProp name="Argument.value">ie</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="superUser.PDO0021" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">superUser.PDO0021</stringProp>
                    <stringProp name="Argument.value">P1.C1.A1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="mbox" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mbox</stringProp>
                    <stringProp name="Argument.value">target-global-mbox</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxXDomain" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxXDomain</stringProp>
                    <stringProp name="Argument.value">enabled</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="devicePixelRatio" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">devicePixelRatio</stringProp>
                    <stringProp name="Argument.value">1.5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="customerStatus" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">customerStatus</stringProp>
                    <stringProp name="Argument.value">pre-product</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="entity.category_terminal" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">entity.category_terminal</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="screenOrientation" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">screenOrientation</stringProp>
                    <stringProp name="Argument.value">landscape</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxAAMB" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxAAMB</stringProp>
                    <stringProp name="Argument.value">6G1ynYcLPuiQxYZrsz_pkqfLG9yMXBpb2zX5dvJdYQJzPXImdj0y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxReferrer" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">mboxReferrer</stringProp>
                    <stringProp name="Argument.value">https://ie.rs-online.com/web/</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxVersion" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxVersion</stringProp>
                    <stringProp name="Argument.value">1.6.4</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="user_status" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">user_status</stringProp>
                    <stringProp name="Argument.value">logged-out</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="customerStatus.currentTimeInSegment" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">customerStatus.currentTimeInSegment</stringProp>
                    <stringProp name="Argument.value">14</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxMCGVID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxMCGVID</stringProp>
                    <stringProp name="Argument.value">55553204461892209120886360951688208345</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxMCGLH" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxMCGLH</stringProp>
                    <stringProp name="Argument.value">6</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="tms.space" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tms.space</stringProp>
                    <stringProp name="Argument.value">responsiveprod</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxCount" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxCount</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="browserHeight" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">browserHeight</stringProp>
                    <stringProp name="Argument.value">610</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="screenHeight" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">screenHeight</stringProp>
                    <stringProp name="Argument.value">720</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxPC" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxPC</stringProp>
                    <stringProp name="Argument.value">8e3e00e2b1e64b16813036a3a04e9bd0.37_0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxHost" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxHost</stringProp>
                    <stringProp name="Argument.value">ie.rs-online.com</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="customerStatus.transition" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">customerStatus.transition</stringProp>
                    <stringProp name="Argument.value">none</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="profile.ecSystemId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">profile.ecSystemId</stringProp>
                    <stringProp name="Argument.value">responsive</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="entity.categoryId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">entity.categoryId</stringProp>
                    <stringProp name="Argument.value">PSSS_114891</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="browserTimeOffset" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">browserTimeOffset</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="entity.category_l2" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">entity.category_l2</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxRid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxRid</stringProp>
                    <stringProp name="Argument.value">e8a6045fa2b74990b320aba1b2d80452</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="colorDepth" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">colorDepth</stringProp>
                    <stringProp name="Argument.value">24</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="browserWidth" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">browserWidth</stringProp>
                    <stringProp name="Argument.value">1263</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="entity.category_l1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">entity.category_l1</stringProp>
                    <stringProp name="Argument.value">PSSS_114891</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">m2/rscomponentsltd/mbox/json</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1270219389">Popular in the </stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">Failed recommendation homepage</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage - DynamicHome" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">web/services/webAnalytics/dynamicHomeData</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic TW9iaWxlV2ViOmVtcHR5</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage- Cat" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="categoryId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">categoryId</stringProp>
                    <stringProp name="Argument.value">PSSS_114891</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">target</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://logx.optimizely.com/v1/events" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;account_id&quot;:&quot;14693890070&quot;,&quot;anonymize_ip&quot;:true,&quot;client_name&quot;:&quot;js&quot;,&quot;client_version&quot;:&quot;0.161.0&quot;,&quot;enrich_decisions&quot;:true,&quot;project_id&quot;:&quot;17493691030&quot;,&quot;revision&quot;:&quot;1156&quot;,&quot;visitors&quot;:[{&quot;visitor_id&quot;:&quot;oeu1611405061391r0.7578233389048845&quot;,&quot;session_id&quot;:&quot;AUTO&quot;,&quot;attributes&quot;:[{&quot;e&quot;:null,&quot;k&quot;:&quot;&quot;,&quot;t&quot;:&quot;first_session&quot;,&quot;v&quot;:true},{&quot;e&quot;:null,&quot;k&quot;:&quot;&quot;,&quot;t&quot;:&quot;browserId&quot;,&quot;v&quot;:&quot;gc&quot;},{&quot;e&quot;:&quot;17933884523&quot;,&quot;k&quot;:&quot;market&quot;,&quot;t&quot;:&quot;custom&quot;,&quot;v&quot;:&quot;ie&quot;},{&quot;e&quot;:&quot;19187530328&quot;,&quot;k&quot;:&quot;ecoSystemId&quot;,&quot;t&quot;:&quot;custom&quot;,&quot;v&quot;:&quot;WEB&quot;},{&quot;e&quot;:null,&quot;k&quot;:&quot;&quot;,&quot;t&quot;:&quot;device&quot;,&quot;v&quot;:&quot;desktop&quot;},{&quot;e&quot;:null,&quot;k&quot;:&quot;&quot;,&quot;t&quot;:&quot;device_type&quot;,&quot;v&quot;:&quot;desktop_laptop&quot;},{&quot;e&quot;:null,&quot;k&quot;:&quot;&quot;,&quot;t&quot;:&quot;source_type&quot;,&quot;v&quot;:&quot;direct&quot;},{&quot;e&quot;:null,&quot;k&quot;:&quot;&quot;,&quot;t&quot;:&quot;currentTimestamp&quot;,&quot;v&quot;:1611411206213}],&quot;snapshots&quot;:[{&quot;activationTimestamp&quot;:1611411206181,&quot;decisions&quot;:[],&quot;events&quot;:[{&quot;e&quot;:null,&quot;y&quot;:&quot;client_activation&quot;,&quot;u&quot;:&quot;f8ca4570-7848-405d-a6ca-378c8b37a061&quot;,&quot;t&quot;:1611411206215}]}]}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">v1/events</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://analytics.foresee.com/ingest/events" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;customerId&quot;:&quot;Cas8YFMGSyh2ajfLBpH6WQ==&quot;,&quot;appId&quot;:&quot;fs_behavioral_data&quot;,&quot;userId&quot;:&quot;6292ecbd-ac33-45a9-a78d-cbcd7fb7d847&quot;,&quot;deviceProfile&quot;:{&quot;fs_os&quot;:&quot;Windows&quot;,&quot;fs_osVersion&quot;:10,&quot;fs_sdkVersion&quot;:&quot;19.7.3&quot;,&quot;fs_browserName&quot;:&quot;Chrome&quot;,&quot;fs_browserVersion&quot;:87,&quot;fs_type&quot;:&quot;Desktop&quot;,&quot;fs_productType&quot;:&quot;web sdk&quot;},&quot;events&quot;:[{&quot;name&quot;:&quot;fs_pageView&quot;,&quot;properties&quot;:{&quot;fs_pageUrl&quot;:[&quot;https://ie.rs-online.com/web/&quot;]},&quot;data&quot;:{&quot;fs_adobe_uid&quot;:&quot;55553204461892209120886360951688208345&quot;,&quot;fs_pageTitle&quot;:&quot;RS | Electronic and Electrical Components&quot;,&quot;fs_session_id&quot;:&quot;78385891-8abd-49de-8cb3-86b1bc7b7893&quot;},&quot;timestamp&quot;:&quot;2021-01-23T14:13:29.379Z&quot;,&quot;timezone&quot;:0}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ingest/events</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Request-API-Version" elementType="Header">
                    <stringProp name="Header.name">Request-API-Version</stringProp>
                    <stringProp name="Header.value">1.0.0</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://col.eum-appdynamics.com/eumcollector/beacons/browser/v1/AD-AAB-AAF-BNE/adrum" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;vr&quot;:&quot;20.12.0.3360&quot;,&quot;dt&quot;:&quot;R&quot;,&quot;rg&quot;:&quot;0&quot;,&quot;es&quot;:[{&quot;eg&quot;:&quot;1&quot;,&quot;et&quot;:2,&quot;eu&quot;:&quot;0://1/2/3&quot;,&quot;ts&quot;:1611411209965,&quot;mg&quot;:&quot;0&quot;,&quot;au&quot;:&quot;0://4/5/&quot;,&quot;at&quot;:0,&quot;pp&quot;:3,&quot;mx&quot;:{&quot;PLC&quot;:1,&quot;FBT&quot;:396,&quot;DDT&quot;:1,&quot;DPT&quot;:0,&quot;PLT&quot;:397,&quot;ARE&quot;:0},&quot;md&quot;:&quot;POST&quot;,&quot;xs&quot;:200,&quot;si&quot;:16},{&quot;eg&quot;:&quot;0&quot;,&quot;et&quot;:0,&quot;eu&quot;:&quot;0://4/5/&quot;,&quot;ts&quot;:1611411203693,&quot;mc&quot;:{&quot;PLT&quot;:4169,&quot;FBT&quot;:3701,&quot;FET&quot;:468,&quot;DRT&quot;:423,&quot;PRT&quot;:45,&quot;DOM&quot;:4124,&quot;ts&quot;:1611411203692,&quot;PLC&quot;:1},&quot;mx&quot;:{&quot;PLT&quot;:3756,&quot;FBT&quot;:249,&quot;SCT&quot;:74,&quot;SHT&quot;:58,&quot;DLT&quot;:0,&quot;TCP&quot;:58,&quot;RAT&quot;:175,&quot;FET&quot;:3507,&quot;DRT&quot;:1513,&quot;DDT&quot;:14,&quot;DPT&quot;:1499,&quot;PRT&quot;:1994,&quot;DOM&quot;:1762,&quot;ts&quot;:1611411203693,&quot;PLC&quot;:1,&quot;VCT&quot;:3226},&quot;pl&quot;:&quot;RS | Electronic and Electrical Components&quot;,&quot;rt&quot;:{&quot;v&quot;:2,&quot;ic&quot;:{&quot;other&quot;:1,&quot;link&quot;:7,&quot;script&quot;:52,&quot;img&quot;:32,&quot;xmlhttprequest&quot;:7,&quot;css&quot;:30,&quot;iframe&quot;:9,&quot;beacon&quot;:1},&quot;it&quot;:{&quot;other&quot;:1,&quot;link&quot;:2,&quot;script&quot;:3,&quot;img&quot;:4,&quot;xmlhttprequest&quot;:5,&quot;css&quot;:6,&quot;iframe&quot;:7,&quot;beacon&quot;:8},&quot;rc&quot;:{&quot;other&quot;:14,&quot;css&quot;:7,&quot;script&quot;:52,&quot;svg&quot;:2,&quot;img&quot;:58,&quot;html&quot;:4,&quot;font&quot;:2},&quot;rt&quot;:{&quot;other&quot;:1,&quot;css&quot;:2,&quot;script&quot;:3,&quot;svg&quot;:4,&quot;img&quot;:5,&quot;html&quot;:6,&quot;font&quot;:7},&quot;f&quot;:{&quot;1&quot;:[&quot;startTime&quot;,&quot;redirectStart&quot;,&quot;redirectEnd&quot;,&quot;fetchStart&quot;,&quot;dnsLookupStart&quot;,&quot;dnsLookupEnd&quot;,&quot;connectStart&quot;,&quot;secureConnectionStart&quot;,&quot;connectEnd&quot;,&quot;requestStart&quot;,&quot;responseStart&quot;,&quot;responseEnd&quot;],&quot;2&quot;:[&quot;startTime&quot;,&quot;fetchStart&quot;,&quot;responseEnd&quot;]},&quot;t&quot;:1611411203693,&quot;r&quot;:[{&quot;u&quot;:&quot;0://4/5/&quot;,&quot;i&quot;:1,&quot;r&quot;:1,&quot;f&quot;:1,&quot;o&quot;:1,&quot;m&quot;:[0,-1,-1,1,13,13,13,13,71,74,249,263],&quot;e&quot;:-1,&quot;d&quot;:-1,&quot;s&quot;:-1,&quot;p&quot;:&quot;&quot;},{&quot;u&quot;:&quot;0://4/6/7&quot;,&quot;i&quot;:2,&quot;r&quot;:2,&quot;f&quot;:1,&quot;o&quot;:552,&quot;m&quot;:[0,-1,-1,0,5,5,5,15,29,29,52,61],&quot;e&quot;:16499,&quot;d&quot;:82630,&quot;s&quot;:16806,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://4/6/8&quot;,&quot;i&quot;:2,&quot;r&quot;:2,&quot;f&quot;:1,&quot;o&quot;:553,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,30,67,81],&quot;e&quot;:14665,&quot;d&quot;:72978,&quot;s&quot;:14963,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://4/6/9&quot;,&quot;i&quot;:2,&quot;r&quot;:2,&quot;f&quot;:1,&quot;o&quot;:554,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,29,58,64],&quot;e&quot;:1278,&quot;d&quot;:5693,&quot;s&quot;:1548,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://4/10/11&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:1,&quot;o&quot;:555,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,28,89,105],&quot;e&quot;:37558,&quot;d&quot;:97163,&quot;s&quot;:37930,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://4/12/13&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:1,&quot;o&quot;:555,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,27,104,110],&quot;e&quot;:1670,&quot;d&quot;:8698,&quot;s&quot;:1950,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://4/12/14&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:1,&quot;o&quot;:556,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,26,77,80],&quot;e&quot;:5088,&quot;d&quot;:21392,&quot;s&quot;:5377,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://15/16/17/18&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:2,&quot;o&quot;:557,&quot;m&quot;:[0,0,185],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://19/20/21/22/23/24/25&quot;,&quot;i&quot;:2,&quot;r&quot;:2,&quot;f&quot;:1,&quot;o&quot;:563,&quot;m&quot;:[0,-1,-1,0,4,4,4,11,29,30,50,56],&quot;e&quot;:3480,&quot;d&quot;:23427,&quot;s&quot;:3810,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://19/26/27/21/28/22/29/30/31&quot;,&quot;i&quot;:4,&quot;r&quot;:4,&quot;f&quot;:1,&quot;o&quot;:564,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,475,498,522],&quot;e&quot;:492,&quot;d&quot;:1259,&quot;s&quot;:816,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://32/33/34/23/35/36/37&quot;,&quot;i&quot;:4,&quot;r&quot;:5,&quot;f&quot;:2,&quot;o&quot;:565,&quot;m&quot;:[0,0,569],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://32/33/34/23/35/36/38&quot;,&quot;i&quot;:4,&quot;r&quot;:5,&quot;f&quot;:2,&quot;o&quot;:566,&quot;m&quot;:[0,0,549],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://32/33/34/23/35/36/39&quot;,&quot;i&quot;:4,&quot;r&quot;:5,&quot;f&quot;:2,&quot;o&quot;:566,&quot;m&quot;:[0,0,608],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://32/33/34/23/35/36/40&quot;,&quot;i&quot;:4,&quot;r&quot;:5,&quot;f&quot;:2,&quot;o&quot;:567,&quot;m&quot;:[0,0,563],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://32/33/34/23/35/36/41&quot;,&quot;i&quot;:4,&quot;r&quot;:5,&quot;f&quot;:2,&quot;o&quot;:567,&quot;m&quot;:[0,0,582],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://32/33/34/23/35/36/42&quot;,&quot;i&quot;:4,&quot;r&quot;:5,&quot;f&quot;:2,&quot;o&quot;:567,&quot;m&quot;:[0,0,617],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://32/33/34/23/35/36/43&quot;,&quot;i&quot;:4,&quot;r&quot;:5,&quot;f&quot;:2,&quot;o&quot;:567,&quot;m&quot;:[0,0,635],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://32/33/34/23/35/36/44&quot;,&quot;i&quot;:4,&quot;r&quot;:5,&quot;f&quot;:2,&quot;o&quot;:567,&quot;m&quot;:[0,0,652],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://32/33/34/23/35/36/45&quot;,&quot;i&quot;:4,&quot;r&quot;:5,&quot;f&quot;:2,&quot;o&quot;:567,&quot;m&quot;:[0,0,675],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://32/33/34/23/35/36/46&quot;,&quot;i&quot;:4,&quot;r&quot;:5,&quot;f&quot;:2,&quot;o&quot;:567,&quot;m&quot;:[0,0,679],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://32/33/34/23/35/36/47&quot;,&quot;i&quot;:4,&quot;r&quot;:5,&quot;f&quot;:2,&quot;o&quot;:568,&quot;m&quot;:[0,0,687],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://32/33/34/23/35/36/48&quot;,&quot;i&quot;:4,&quot;r&quot;:5,&quot;f&quot;:2,&quot;o&quot;:568,&quot;m&quot;:[0,0,695],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://4/49/34/50/51/52&quot;,&quot;i&quot;:4,&quot;r&quot;:5,&quot;f&quot;:1,&quot;o&quot;:575,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,514,586,610],&quot;e&quot;:2708,&quot;d&quot;:2708,&quot;s&quot;:2958,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://4/12/53&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:1,&quot;o&quot;:575,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,96,117,129],&quot;e&quot;:12938,&quot;d&quot;:35637,&quot;s&quot;:13246,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://4/54/55/56&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:1,&quot;o&quot;:576,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,165,187,190],&quot;e&quot;:11264,&quot;d&quot;:37159,&quot;s&quot;:11563,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://4/12/57&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:1,&quot;o&quot;:577,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,181,214,215],&quot;e&quot;:7741,&quot;d&quot;:27663,&quot;s&quot;:8039,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://4/12/58&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:1,&quot;o&quot;:578,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,443,472,474],&quot;e&quot;:3467,&quot;d&quot;:8085,&quot;s&quot;:3756,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://4/12/59&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:1,&quot;o&quot;:578,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,445,472,505],&quot;e&quot;:36301,&quot;d&quot;:103060,&quot;s&quot;:36672,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://4/12/60&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:1,&quot;o&quot;:578,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,448,509,516],&quot;e&quot;:3340,&quot;d&quot;:13280,&quot;s&quot;:3629,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://4/61/62&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:1,&quot;o&quot;:578,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,448,509,518],&quot;e&quot;:18338,&quot;d&quot;:72012,&quot;s&quot;:18613,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://4/5/63&quot;,&quot;i&quot;:5,&quot;r&quot;:6,&quot;f&quot;:1,&quot;o&quot;:771,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,4,52,53],&quot;e&quot;:38,&quot;d&quot;:18,&quot;s&quot;:1052,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://64/55/65&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:1,&quot;o&quot;:859,&quot;m&quot;:[0,-1,-1,0,230,230,230,238,254,255,292,354],&quot;e&quot;:95457,&quot;d&quot;:328801,&quot;s&quot;:96368,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://32/33/34/66/67&quot;,&quot;i&quot;:4,&quot;r&quot;:5,&quot;f&quot;:2,&quot;o&quot;:911,&quot;m&quot;:[0,0,353],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://15/68/69?70&quot;,&quot;i&quot;:4,&quot;r&quot;:5,&quot;f&quot;:2,&quot;o&quot;:916,&quot;m&quot;:[0,0,207],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://71/72/73/74/75?76&quot;,&quot;i&quot;:5,&quot;r&quot;:1,&quot;f&quot;:1,&quot;o&quot;:978,&quot;m&quot;:[0,-1,-1,0,4,4,4,27,57,61,207,262],&quot;e&quot;:51906,&quot;d&quot;:285058,&quot;s&quot;:52280,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://4/6/77/78&quot;,&quot;i&quot;:6,&quot;r&quot;:7,&quot;f&quot;:1,&quot;o&quot;:1216,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,95,251,261],&quot;e&quot;:24747,&quot;d&quot;:47084,&quot;s&quot;:25116,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://15/16/17/79?80&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:2,&quot;o&quot;:1269,&quot;m&quot;:[0,0,23],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://32/33/34/22/81/82&quot;,&quot;i&quot;:6,&quot;r&quot;:5,&quot;f&quot;:2,&quot;o&quot;:1318,&quot;m&quot;:[0,0,174],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://19/27/21/22/23/83/84&quot;,&quot;i&quot;:6,&quot;r&quot;:5,&quot;f&quot;:1,&quot;o&quot;:1405,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,12,43,53],&quot;e&quot;:13470,&quot;d&quot;:13470,&quot;s&quot;:13684,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://32/33/34/23/85/86/87&quot;,&quot;i&quot;:6,&quot;r&quot;:5,&quot;f&quot;:2,&quot;o&quot;:1418,&quot;m&quot;:[0,0,102],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://32/33/34/23/88/89/90&quot;,&quot;i&quot;:6,&quot;r&quot;:5,&quot;f&quot;:2,&quot;o&quot;:1419,&quot;m&quot;:[0,0,145],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://32/33/34/23/91/92&quot;,&quot;i&quot;:6,&quot;r&quot;:5,&quot;f&quot;:2,&quot;o&quot;:1421,&quot;m&quot;:[0,0,144],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://32/33/34/23/91/36/93&quot;,&quot;i&quot;:6,&quot;r&quot;:5,&quot;f&quot;:2,&quot;o&quot;:1423,&quot;m&quot;:[0,0,197],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://4/94/95/96&quot;,&quot;i&quot;:6,&quot;r&quot;:5,&quot;f&quot;:1,&quot;o&quot;:1591,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,2,70,72],&quot;e&quot;:10835,&quot;d&quot;:10835,&quot;s&quot;:11105,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://4/5/63&quot;,&quot;i&quot;:5,&quot;r&quot;:6,&quot;f&quot;:1,&quot;o&quot;:1666,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,4,110,111],&quot;e&quot;:38,&quot;d&quot;:18,&quot;s&quot;:768,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://4/5/97/98/99&quot;,&quot;i&quot;:5,&quot;r&quot;:1,&quot;f&quot;:1,&quot;o&quot;:1681,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,4,78,79],&quot;e&quot;:134,&quot;d&quot;:116,&quot;s&quot;:838,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://15/100/101/102/103?104&quot;,&quot;i&quot;:4,&quot;r&quot;:5,&quot;f&quot;:2,&quot;o&quot;:1798,&quot;m&quot;:[0,0,17],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://105/106?107&quot;,&quot;i&quot;:5,&quot;r&quot;:1,&quot;f&quot;:2,&quot;o&quot;:1971,&quot;m&quot;:[0,0,195],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;http/1.1&quot;},{&quot;u&quot;:&quot;0://108/109/110/24/111&quot;,&quot;i&quot;:2,&quot;r&quot;:2,&quot;f&quot;:1,&quot;o&quot;:2031,&quot;m&quot;:[0,-1,-1,0,2,2,2,20,41,42,57,64],&quot;e&quot;:4292,&quot;d&quot;:21658,&quot;s&quot;:4533,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://15/16/17/112/113?114&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:2,&quot;o&quot;:2257,&quot;m&quot;:[0,0,20],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://15/16/17/112/115?116&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:2,&quot;o&quot;:2259,&quot;m&quot;:[0,0,43],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://15/16/17/112/117?118&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:2,&quot;o&quot;:2261,&quot;m&quot;:[0,0,19],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://15/16/17/112/119?120&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:2,&quot;o&quot;:2263,&quot;m&quot;:[0,0,32],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://15/16/17/112/121?122&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:2,&quot;o&quot;:2264,&quot;m&quot;:[0,0,540],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://15/100/101/123/103?124&quot;,&quot;i&quot;:4,&quot;r&quot;:5,&quot;f&quot;:2,&quot;o&quot;:2375,&quot;m&quot;:[0,0,18],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://108/109/110/24/111&quot;,&quot;i&quot;:2,&quot;r&quot;:2,&quot;f&quot;:1,&quot;o&quot;:2380,&quot;m&quot;:[0,-1,-1,0,0,0,0,-1,0,2,3,4],&quot;e&quot;:4292,&quot;d&quot;:21658,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://125/126/127&quot;,&quot;i&quot;:7,&quot;r&quot;:6,&quot;f&quot;:2,&quot;o&quot;:2548,&quot;m&quot;:[0,0,50],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;&quot;},{&quot;u&quot;:&quot;0://32/33/34/22/81/82&quot;,&quot;i&quot;:4,&quot;r&quot;:5,&quot;f&quot;:2,&quot;o&quot;:3035,&quot;m&quot;:[0,0,198],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://32/33/34/22/128/129&quot;,&quot;i&quot;:4,&quot;r&quot;:5,&quot;f&quot;:2,&quot;o&quot;:3036,&quot;m&quot;:[0,0,191],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://130/131?&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:2,&quot;o&quot;:3299,&quot;m&quot;:[0,0,72],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://19/132/133&quot;,&quot;i&quot;:6,&quot;r&quot;:5,&quot;f&quot;:1,&quot;o&quot;:3373,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,3,16,21],&quot;e&quot;:18088,&quot;d&quot;:18088,&quot;s&quot;:18267,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://19/132/134&quot;,&quot;i&quot;:6,&quot;r&quot;:5,&quot;f&quot;:1,&quot;o&quot;:3375,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,4,21,28],&quot;e&quot;:22374,&quot;d&quot;:22374,&quot;s&quot;:22520,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://19/132/135&quot;,&quot;i&quot;:6,&quot;r&quot;:5,&quot;f&quot;:1,&quot;o&quot;:3378,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,4,25,29],&quot;e&quot;:11982,&quot;d&quot;:11982,&quot;s&quot;:12119,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://19/132/136&quot;,&quot;i&quot;:6,&quot;r&quot;:5,&quot;f&quot;:1,&quot;o&quot;:3379,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,3,26,33],&quot;e&quot;:13585,&quot;d&quot;:13585,&quot;s&quot;:13809,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://19/132/137&quot;,&quot;i&quot;:6,&quot;r&quot;:5,&quot;f&quot;:1,&quot;o&quot;:3381,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,2,31,35],&quot;e&quot;:18617,&quot;d&quot;:18617,&quot;s&quot;:18763,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://19/132/138&quot;,&quot;i&quot;:6,&quot;r&quot;:5,&quot;f&quot;:1,&quot;o&quot;:3382,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,3,37,41],&quot;e&quot;:14142,&quot;d&quot;:14142,&quot;s&quot;:14303,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://19/132/139&quot;,&quot;i&quot;:6,&quot;r&quot;:5,&quot;f&quot;:1,&quot;o&quot;:3383,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,14,38,44],&quot;e&quot;:14275,&quot;d&quot;:14275,&quot;s&quot;:14417,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://19/132/140&quot;,&quot;i&quot;:6,&quot;r&quot;:5,&quot;f&quot;:1,&quot;o&quot;:3385,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,22,42,48],&quot;e&quot;:13919,&quot;d&quot;:13919,&quot;s&quot;:14126,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://19/132/141&quot;,&quot;i&quot;:6,&quot;r&quot;:5,&quot;f&quot;:1,&quot;o&quot;:3386,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,28,46,57],&quot;e&quot;:14325,&quot;d&quot;:14325,&quot;s&quot;:14500,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://19/132/142&quot;,&quot;i&quot;:6,&quot;r&quot;:5,&quot;f&quot;:1,&quot;o&quot;:3388,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,28,53,57],&quot;e&quot;:14955,&quot;d&quot;:14955,&quot;s&quot;:15092,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://19/132/143&quot;,&quot;i&quot;:6,&quot;r&quot;:5,&quot;f&quot;:1,&quot;o&quot;:3390,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,30,57,62],&quot;e&quot;:17253,&quot;d&quot;:17253,&quot;s&quot;:17405,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://19/132/144&quot;,&quot;i&quot;:6,&quot;r&quot;:5,&quot;f&quot;:1,&quot;o&quot;:3393,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,32,59,64],&quot;e&quot;:18189,&quot;d&quot;:18189,&quot;s&quot;:18421,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://19/132/145&quot;,&quot;i&quot;:6,&quot;r&quot;:5,&quot;f&quot;:1,&quot;o&quot;:3397,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,33,59,66],&quot;e&quot;:13883,&quot;d&quot;:13883,&quot;s&quot;:14025,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://19/132/146&quot;,&quot;i&quot;:6,&quot;r&quot;:5,&quot;f&quot;:1,&quot;o&quot;:3399,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,35,63,79],&quot;e&quot;:16081,&quot;d&quot;:16081,&quot;s&quot;:16247,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://19/132/147&quot;,&quot;i&quot;:6,&quot;r&quot;:5,&quot;f&quot;:1,&quot;o&quot;:3400,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,45,81,83],&quot;e&quot;:12341,&quot;d&quot;:12341,&quot;s&quot;:12478,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://19/132/148&quot;,&quot;i&quot;:6,&quot;r&quot;:5,&quot;f&quot;:1,&quot;o&quot;:3401,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,47,80,94],&quot;e&quot;:13686,&quot;d&quot;:13686,&quot;s&quot;:13888,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://19/132/149&quot;,&quot;i&quot;:6,&quot;r&quot;:5,&quot;f&quot;:1,&quot;o&quot;:3403,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,52,92,94],&quot;e&quot;:13832,&quot;d&quot;:13832,&quot;s&quot;:14006,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://19/132/150&quot;,&quot;i&quot;:6,&quot;r&quot;:5,&quot;f&quot;:1,&quot;o&quot;:3406,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,56,115,135],&quot;e&quot;:46962,&quot;d&quot;:46962,&quot;s&quot;:47123,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://19/132/151&quot;,&quot;i&quot;:6,&quot;r&quot;:5,&quot;f&quot;:1,&quot;o&quot;:3408,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,57,113,138],&quot;e&quot;:20838,&quot;d&quot;:20838,&quot;s&quot;:21017,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://19/132/152&quot;,&quot;i&quot;:6,&quot;r&quot;:5,&quot;f&quot;:1,&quot;o&quot;:3412,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,68,106,109],&quot;e&quot;:21936,&quot;d&quot;:21936,&quot;s&quot;:22083,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://108/109/110/77/153?154&quot;,&quot;i&quot;:6,&quot;r&quot;:7,&quot;f&quot;:1,&quot;o&quot;:3414,&quot;m&quot;:[0,-1,-1,0,134,134,134,147,179,180,199,217],&quot;e&quot;:44433,&quot;d&quot;:44432,&quot;s&quot;:44692,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://155/156/157/158/159&quot;,&quot;i&quot;:6,&quot;r&quot;:4,&quot;f&quot;:2,&quot;o&quot;:3507,&quot;m&quot;:[0,0,126],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;http/1.1&quot;},{&quot;u&quot;:&quot;0://15/100/101/102/103?160&quot;,&quot;i&quot;:4,&quot;r&quot;:5,&quot;f&quot;:2,&quot;o&quot;:3559,&quot;m&quot;:[0,0,19],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://161/101/3&quot;,&quot;i&quot;:5,&quot;r&quot;:1,&quot;f&quot;:1,&quot;o&quot;:3572,&quot;m&quot;:[0,-1,-1,0,5,6,6,95,482,483,616,616],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:361,&quot;p&quot;:&quot;http/1.1&quot;},{&quot;u&quot;:&quot;0://130/162/163/164/165/166&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:2,&quot;o&quot;:3632,&quot;m&quot;:[0,0,36],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://167/168&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:2,&quot;o&quot;:3699,&quot;m&quot;:[0,0,322],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://169/170/171&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:1,&quot;o&quot;:3702,&quot;m&quot;:[0,-1,-1,0,2,273,273,281,299,312,330,363],&quot;e&quot;:37710,&quot;d&quot;:104880,&quot;s&quot;:38299,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://172/173/55?174&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:2,&quot;o&quot;:3704,&quot;m&quot;:[0,0,480],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://172/173/55?175&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:2,&quot;o&quot;:3710,&quot;m&quot;:[0,0,400],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://172/173/55?176&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:2,&quot;o&quot;:3723,&quot;m&quot;:[0,0,386],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://172/173/55?177&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:2,&quot;o&quot;:3726,&quot;m&quot;:[0,0,481],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://178/101/179&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:2,&quot;o&quot;:3729,&quot;m&quot;:[0,0,661],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;http/1.1&quot;},{&quot;u&quot;:&quot;0://180/181/182/183&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:2,&quot;o&quot;:3740,&quot;m&quot;:[0,0,281],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://184/185?186&quot;,&quot;i&quot;:4,&quot;r&quot;:5,&quot;f&quot;:2,&quot;o&quot;:3748,&quot;m&quot;:[0,0,343],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://187/188/189/190/191&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:2,&quot;o&quot;:3753,&quot;m&quot;:[0,0,335],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://192/193/194?195&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:2,&quot;o&quot;:3828,&quot;m&quot;:[0,0,391],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://196/197?198#199&quot;,&quot;i&quot;:7,&quot;r&quot;:6,&quot;f&quot;:2,&quot;o&quot;:3873,&quot;m&quot;:[0,0,246],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;&quot;},{&quot;u&quot;:&quot;0://200/102/201/202/203/204/205?206&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:2,&quot;o&quot;:3899,&quot;m&quot;:[0,0,288],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://169/207&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:1,&quot;o&quot;:4171,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,29,43,51],&quot;e&quot;:19807,&quot;d&quot;:52227,&quot;s&quot;:20378,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://172/173/55?208&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:2,&quot;o&quot;:4293,&quot;m&quot;:[0,0,111],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h3-29&quot;},{&quot;u&quot;:&quot;0://172/173/55?209&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:2,&quot;o&quot;:4296,&quot;m&quot;:[0,0,138],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h3-29&quot;},{&quot;u&quot;:&quot;0://172/173/55?210&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:2,&quot;o&quot;:4304,&quot;m&quot;:[0,0,129],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h3-29&quot;},{&quot;u&quot;:&quot;0://187/112/211/212&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:2,&quot;o&quot;:4376,&quot;m&quot;:[0,0,24],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://187/112/211/213&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:2,&quot;o&quot;:4380,&quot;m&quot;:[0,0,27],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://187/112/211/214&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:2,&quot;o&quot;:4383,&quot;m&quot;:[0,0,35],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://187/112/211/215&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:2,&quot;o&quot;:4387,&quot;m&quot;:[0,0,47],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://192/26/216/217/218/219/220/221/222?223&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:2,&quot;o&quot;:4472,&quot;m&quot;:[0,0,133],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://224/225/226&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:1,&quot;o&quot;:4489,&quot;m&quot;:[0,-1,-1,0,3,31,31,56,95,95,158,162],&quot;e&quot;:12189,&quot;d&quot;:31122,&quot;s&quot;:12949,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://227/228?&quot;,&quot;i&quot;:7,&quot;r&quot;:1,&quot;f&quot;:1,&quot;o&quot;:4543,&quot;m&quot;:[0,0,137,144,144,144,144,144,164,165,231,234],&quot;e&quot;:388,&quot;d&quot;:507,&quot;s&quot;:718,&quot;p&quot;:&quot;h3-29&quot;},{&quot;u&quot;:&quot;0://227/228?&quot;,&quot;i&quot;:7,&quot;r&quot;:1,&quot;f&quot;:1,&quot;o&quot;:4598,&quot;m&quot;:[0,0,81,88,88,88,88,88,88,111,179,181],&quot;e&quot;:389,&quot;d&quot;:507,&quot;s&quot;:1196,&quot;p&quot;:&quot;h3-29&quot;},{&quot;u&quot;:&quot;0://227/228?&quot;,&quot;i&quot;:7,&quot;r&quot;:1,&quot;f&quot;:1,&quot;o&quot;:4638,&quot;m&quot;:[0,0,76,82,82,82,82,82,82,84,156,157],&quot;e&quot;:372,&quot;d&quot;:465,&quot;s&quot;:669,&quot;p&quot;:&quot;h3-29&quot;},{&quot;u&quot;:&quot;0://227/228?&quot;,&quot;i&quot;:7,&quot;r&quot;:1,&quot;f&quot;:1,&quot;o&quot;:4667,&quot;m&quot;:[0,0,108,119,119,119,119,119,119,125,190,192],&quot;e&quot;:369,&quot;d&quot;:459,&quot;s&quot;:415,&quot;p&quot;:&quot;h3-29&quot;},{&quot;u&quot;:&quot;0://227/228?&quot;,&quot;i&quot;:7,&quot;r&quot;:1,&quot;f&quot;:1,&quot;o&quot;:4701,&quot;m&quot;:[0,0,80,92,92,92,92,92,92,93,159,160],&quot;e&quot;:366,&quot;d&quot;:458,&quot;s&quot;:412,&quot;p&quot;:&quot;h3-29&quot;},{&quot;u&quot;:&quot;0://227/228?&quot;,&quot;i&quot;:7,&quot;r&quot;:1,&quot;f&quot;:1,&quot;o&quot;:4746,&quot;m&quot;:[0,0,68,73,73,73,73,73,73,73,134,141],&quot;e&quot;:367,&quot;d&quot;:459,&quot;s&quot;:413,&quot;p&quot;:&quot;h3-29&quot;},{&quot;u&quot;:&quot;0://227/228?&quot;,&quot;i&quot;:7,&quot;r&quot;:1,&quot;f&quot;:1,&quot;o&quot;:4799,&quot;m&quot;:[0,0,72,75,75,75,75,75,75,76,138,149],&quot;e&quot;:371,&quot;d&quot;:467,&quot;s&quot;:417,&quot;p&quot;:&quot;h3-29&quot;},{&quot;u&quot;:&quot;0://229/230?231&quot;,&quot;i&quot;:4,&quot;r&quot;:5,&quot;f&quot;:2,&quot;o&quot;:4985,&quot;m&quot;:[0,0,121],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;http/1.1&quot;},{&quot;u&quot;:&quot;0://187/112/211/232/233/234/235&quot;,&quot;i&quot;:2,&quot;r&quot;:2,&quot;f&quot;:2,&quot;o&quot;:5695,&quot;m&quot;:[0,0,79],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://187/112/211/232/233/234/236&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:2,&quot;o&quot;:5715,&quot;m&quot;:[0,0,59],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://187/112/211/232/233/234/237&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:2,&quot;o&quot;:5759,&quot;m&quot;:[0,0,50],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://187/112/211/232/233/234/238&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:2,&quot;o&quot;:5761,&quot;m&quot;:[0,0,48],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://187/112/211/232/233/234/239&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:2,&quot;o&quot;:5764,&quot;m&quot;:[0,0,46],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://240/26/216/217/218/219/241/242/?243&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:2,&quot;o&quot;:6208,&quot;m&quot;:[0,0,140],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://240/216/217/218/219/244/245?246&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:2,&quot;o&quot;:6220,&quot;m&quot;:[0,0,134],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://15/100/101/102/103?247&quot;,&quot;i&quot;:4,&quot;r&quot;:5,&quot;f&quot;:2,&quot;o&quot;:6261,&quot;m&quot;:[0,0,65],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://1/2/3&quot;,&quot;i&quot;:5,&quot;r&quot;:1,&quot;f&quot;:2,&quot;o&quot;:6281,&quot;m&quot;:[0,0,379],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://248/225/249/250/?251&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:1,&quot;o&quot;:6354,&quot;m&quot;:[0,-1,-1,0,6,6,6,22,47,48,201,206],&quot;e&quot;:1040,&quot;d&quot;:2271,&quot;s&quot;:1111,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://248/225/249/252/?253&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:1,&quot;o&quot;:6388,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,14,261,263],&quot;e&quot;:1039,&quot;d&quot;:2271,&quot;s&quot;:1110,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://248/225/249/254/?255&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:1,&quot;o&quot;:6474,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,3,341,343],&quot;e&quot;:1038,&quot;d&quot;:2271,&quot;s&quot;:1109,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://248/225/249/254/?256&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:1,&quot;o&quot;:6492,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,3,44,49],&quot;e&quot;:1035,&quot;d&quot;:2263,&quot;s&quot;:1820,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://257/225/258/254/?259&quot;,&quot;i&quot;:4,&quot;r&quot;:5,&quot;f&quot;:1,&quot;o&quot;:6590,&quot;m&quot;:[0,-1,-1,0,5,5,5,21,48,55,138,138],&quot;e&quot;:42,&quot;d&quot;:42,&quot;s&quot;:108,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://260/225/258/254/?259&quot;,&quot;i&quot;:4,&quot;r&quot;:5,&quot;f&quot;:1,&quot;o&quot;:6592,&quot;m&quot;:[0,-1,-1,0,4,5,5,20,51,54,125,126],&quot;e&quot;:42,&quot;d&quot;:42,&quot;s&quot;:108,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://257/225/258/250/?261&quot;,&quot;i&quot;:4,&quot;r&quot;:5,&quot;f&quot;:1,&quot;o&quot;:6614,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,33,100,101],&quot;e&quot;:42,&quot;d&quot;:42,&quot;s&quot;:552,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://260/225/258/250/?261&quot;,&quot;i&quot;:4,&quot;r&quot;:5,&quot;f&quot;:1,&quot;o&quot;:6615,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,33,89,90],&quot;e&quot;:42,&quot;d&quot;:42,&quot;s&quot;:552,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://257/225/258/252/?262&quot;,&quot;i&quot;:4,&quot;r&quot;:5,&quot;f&quot;:1,&quot;o&quot;:6684,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,3,74,75],&quot;e&quot;:42,&quot;d&quot;:42,&quot;s&quot;:108,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://260/225/258/252/?262&quot;,&quot;i&quot;:4,&quot;r&quot;:5,&quot;f&quot;:1,&quot;o&quot;:6685,&quot;m&quot;:[0,-1,-1,0,0,0,0,0,0,4,65,66],&quot;e&quot;:42,&quot;d&quot;:42,&quot;s&quot;:108,&quot;p&quot;:&quot;h2&quot;},{&quot;u&quot;:&quot;0://263/&quot;,&quot;i&quot;:8,&quot;r&quot;:1,&quot;f&quot;:1,&quot;o&quot;:6721,&quot;m&quot;:[0,-1,-1,0,2,2,2,10,24,24,75,75],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:357,&quot;p&quot;:&quot;http/1.1&quot;},{&quot;u&quot;:&quot;0://257/225/258/254/?264&quot;,&quot;i&quot;:4,&quot;r&quot;:5,&quot;f&quot;:1,&quot;o&quot;:6907,&quot;m&quot;:[0,-1,-1,0,5,5,5,5,33,36,122,123],&quot;e&quot;:42,&quot;d&quot;:42,&quot;s&quot;:64,&quot;p&quot;:&quot;h3-29&quot;},{&quot;u&quot;:&quot;0://260/225/258/254/?264&quot;,&quot;i&quot;:4,&quot;r&quot;:5,&quot;f&quot;:1,&quot;o&quot;:6908,&quot;m&quot;:[0,-1,-1,0,5,5,5,5,36,37,113,114],&quot;e&quot;:42,&quot;d&quot;:42,&quot;s&quot;:64,&quot;p&quot;:&quot;h3-29&quot;},{&quot;u&quot;:&quot;0://200/102/201/265/203/204/266?206&quot;,&quot;i&quot;:3,&quot;r&quot;:3,&quot;f&quot;:2,&quot;o&quot;:7136,&quot;m&quot;:[0,0,109],&quot;e&quot;:0,&quot;d&quot;:0,&quot;s&quot;:0,&quot;p&quot;:&quot;h2&quot;}]},&quot;bd&quot;:0,&quot;si&quot;:17}],&quot;ai&quot;:&quot;XD_0215367d_2718_f195_b264_861085e0d9ba&quot;,&quot;gs&quot;:[&quot;f4e247f8_6354_d02a_bbea_a262dd2faaeb&quot;,&quot;d6f35150_d170_f832_1100_ac6809fbbf09&quot;],&quot;up&quot;:[&quot;https&quot;,&quot;analytics.foresee.com&quot;,&quot;ingest&quot;,&quot;events&quot;,&quot;ie.rs-online.com&quot;,&quot;web&quot;,&quot;css_01122021_141434&quot;,&quot;custom-bootstrap.min.css&quot;,&quot;universalHeader.min.css&quot;,&quot;home.min.css&quot;,&quot;jquery&quot;,&quot;jquery-1.12.4.min.js&quot;,&quot;js_01122021_141434&quot;,&quot;common.js&quot;,&quot;scripts.js&quot;,&quot;nexus.ensighten.com&quot;,&quot;rscomponents&quot;,&quot;prod&quot;,&quot;Bootstrap.js&quot;,&quot;media.rs-online.com&quot;,&quot;raw&quot;,&quot;upload&quot;,&quot;campaign&quot;,&quot;home&quot;,&quot;css&quot;,&quot;homepage-style-v1.5.css&quot;,&quot;...&quot;,&quot;image&quot;,&quot;v1587126659&quot;,&quot;global&quot;,&quot;svg&quot;,&quot;rs-Icons_rs_37-info_colour.svg&quot;,&quot;uk.rs-online.com&quot;,&quot;euro&quot;,&quot;img&quot;,&quot;brand&quot;,&quot;2020-07&quot;,&quot;raspberry_pi_162x58.jpg&quot;,&quot;3m_162x58.jpg&quot;,&quot;schneider_162x58.jpg&quot;,&quot;rs_pro_162x58.jpg&quot;,&quot;siemens_162x58.jpg&quot;,&quot;te_connectivity_162x58.jpg&quot;,&quot;smc_162x58.jpg&quot;,&quot;molex_162x58.jpg&quot;,&quot;stm_microelectronics_162x58.jpg&quot;,&quot;harting_162x58.jpg&quot;,&quot;fluke_162x58.jpg&quot;,&quot;ultimaker_162x58.jpg&quot;,&quot;ie&quot;,&quot;site&quot;,&quot;payment&quot;,&quot;paymentOptions.png&quot;,&quot;polyfills.min.js&quot;,&quot;bootstrap&quot;,&quot;js&quot;,&quot;bootstrap.min.js&quot;,&quot;universalHeader.min.js&quot;,&quot;react.min.js&quot;,&quot;reactDom.min.js&quot;,&quot;home.min.js&quot;,&quot;webcontent&quot;,&quot;a1678f29ui170c192cbe462b94bb35&quot;,&quot;miniBasketRunningTotal.html&quot;,&quot;cdn.optimizely.com&quot;,&quot;17493691030.js&quot;,&quot;logos&quot;,&quot;rs.png&quot;,&quot;error&quot;,&quot;e.gif&quot;,&quot;msg=Cannot%20read%20property%20%27addEventListener%27%20of%2...&quot;,&quot;rscomponentsltd.tt.omtrdc.net&quot;,&quot;m2&quot;,&quot;rscomponentsltd&quot;,&quot;mbox&quot;,&quot;json&quot;,&quot;mbox=target-global-mbox&amp;mboxSession=8e3e00e2b1e64b16813036a3...&quot;,&quot;fonts&quot;,&quot;RS-Icons-Web.ttf&quot;,&quot;serverComponent.php&quot;,&quot;r=938388246.819019&amp;namespace=Bootstrapper&amp;staticJsPath=nexus...&quot;,&quot;93515&quot;,&quot;maintain-improve-hp.jpg&quot;,&quot;sprites&quot;,&quot;home_sprites.png&quot;,&quot;secondary&quot;,&quot;2020-12&quot;,&quot;ie-secondary-dec.jpg&quot;,&quot;hero&quot;,&quot;2021-01&quot;,&quot;ne-npi-jan.jpg&quot;,&quot;community&quot;,&quot;designspark-logo.jpg&quot;,&quot;ds-global-july.jpg&quot;,&quot;siteImages&quot;,&quot;general&quot;,&quot;globalSprite.png&quot;,&quot;services&quot;,&quot;webAnalytics&quot;,&quot;dynamicHomeData&quot;,&quot;privacy&quot;,&quot;v1&quot;,&quot;b&quot;,&quot;1.gif&quot;,&quot;n=0&amp;c=1626&amp;i=4gscdt&amp;p=prod&amp;s=308&amp;d=8EZ7InZlcnNpb24iOiIxLjAuM...&quot;,&quot;api.rs-data.tech&quot;,&quot;target&quot;,&quot;categoryId=PSSS_114891&quot;,&quot;netdna.bootstrapcdn.com&quot;,&quot;font-awesome&quot;,&quot;4.0.3&quot;,&quot;font-awesome.css&quot;,&quot;code&quot;,&quot;798934f637e45f80c54d74065ecb4374.js&quot;,&quot;conditionId0=393053&quot;,&quot;26855b8479d25d3e023c3370bb1b0b86.js&quot;,&quot;conditionId0=423040&quot;,&quot;87f700a5bca9f99bcd03ce9772886c9d.js&quot;,&quot;conditionId0=457110&quot;,&quot;c391a145410467f193be230cbdf7f0b1.js&quot;,&quot;conditionId0=4865195&quot;,&quot;46fa064e5eb46150ca2e8be4d20526c7.js&quot;,&quot;conditionId0=3314300&quot;,&quot;c&quot;,&quot;n=0&amp;c=1626&amp;i=85jhym&amp;p=prod&amp;d=9Cd7InZlcnNpb24iOiIxLjAuMCIsImd...&quot;,&quot;a14693890070.cdn.optimizely.com&quot;,&quot;client_storage&quot;,&quot;a14693890070.html&quot;,&quot;Brexit&quot;,&quot;Brexit-HPBanner-1113x338-NO.jpg&quot;,&quot;www.youtube.com&quot;,&quot;iframe_api&quot;,&quot;t_large&quot;,&quot;F8660672-01.jpg&quot;,&quot;F7757233-01.jpg&quot;,&quot;F4574757-01.jpg&quot;,&quot;F7892828-01.jpg&quot;,&quot;F0593423-01.jpg&quot;,&quot;F7892821-01.jpg&quot;,&quot;F4488476-01.jpg&quot;,&quot;F7442199-01.jpg&quot;,&quot;F9176588-01.jpg&quot;,&quot;F7605037-01.jpg&quot;,&quot;F2019422-01.jpg&quot;,&quot;F8602922-01.jpg&quot;,&quot;F7872287-01.jpg&quot;,&quot;F7605031-01.jpg&quot;,&quot;F0451859-01.jpg&quot;,&quot;F7442209-01.jpg&quot;,&quot;R9176581-01.jpg&quot;,&quot;F5132900-01.jpg&quot;,&quot;F8264432-01.jpg&quot;,&quot;F5375488-01.jpg&quot;,&quot;fontawesome-webfont.woff&quot;,&quot;v=4.0.3&quot;,&quot;s3.eu-west-2.amazonaws.com&quot;,&quot;dmpghosting&quot;,&quot;RS&quot;,&quot;NewRecommendations&quot;,&quot;rs_21-chev-right.svg&quot;,&quot;n=1&amp;c=1626&amp;i=4gscdt&amp;p=prod&amp;s=1022&amp;d=8EZ7InZlcnNpb24iOiIxLjAu...&quot;,&quot;logx.optimizely.com&quot;,&quot;s&quot;,&quot;player&quot;,&quot;bfb74eaf&quot;,&quot;www-widgetapi.vflset&quot;,&quot;www-widgetapi.js&quot;,&quot;static.ads-twitter.com&quot;,&quot;uwt.js&quot;,&quot;cdn.appdynamics.com&quot;,&quot;adrum&quot;,&quot;adrum-latest.js&quot;,&quot;www.googletagmanager.com&quot;,&quot;gtag&quot;,&quot;id=AW-958290131&quot;,&quot;id=AW-783976203&quot;,&quot;id=DC-8133184&quot;,&quot;id=AW-960710110&quot;,&quot;cdns.brsrvr.com&quot;,&quot;br-trk-6143.js&quot;,&quot;assets.empathybroker.com&quot;,&quot;apijs&quot;,&quot;1.3&quot;,&quot;empathy.resources.min.js&quot;,&quot;www.facebook.com&quot;,&quot;tr&quot;,&quot;id=320588785046423&amp;ev=PageView&amp;ud[externalid]=fae191f29037e4...&quot;,&quot;gateway.foresee.com&quot;,&quot;sites&quot;,&quot;rscomponentsltd-uk&quot;,&quot;production&quot;,&quot;gateway.min.js&quot;,&quot;lptag.liveperson.net&quot;,&quot;tag&quot;,&quot;tag.js&quot;,&quot;site=50489779&quot;,&quot;electro.demdex.net&quot;,&quot;dest5.html&quot;,&quot;d_nsid=0&quot;,&quot;https%3A%2F%2Fie.rs-online.com%2Fweb%2F&quot;,&quot;stats.rs-online.com&quot;,&quot;ss&quot;,&quot;rscomponentsprod,rscomponentssandpitireland,rscomponentsdsprod&quot;,&quot;10&quot;,&quot;JS-2.10.0&quot;,&quot;s49191713797320&quot;,&quot;AQB=1&amp;ndh=1&amp;pf=1&amp;callback=s_c_il[1].doPostbacks&amp;et=1&amp;t=23%2F...&quot;,&quot;adrum-ext.54a9a330b6d789bd61edecd89332c15b.js&quot;,&quot;id=AW-958290131&amp;l=dataLayer&amp;cx=c&quot;,&quot;id=AW-783976203&amp;l=dataLayer&amp;cx=c&quot;,&quot;id=AW-960710110&amp;l=dataLayer&amp;cx=c&quot;,&quot;19.7.3&quot;,&quot;fs.feedback.js&quot;,&quot;fs.survey.js&quot;,&quot;fs.utils.js&quot;,&quot;fs.trigger.js&quot;,&quot;api&quot;,&quot;account&quot;,&quot;50489779&quot;,&quot;configuration&quot;,&quot;applications&quot;,&quot;taglets&quot;,&quot;.jsonp&quot;,&quot;v=2.0&amp;df=0&amp;s=ie%2Csales&amp;b=1&quot;,&quot;www.googleadservices.com&quot;,&quot;pagead&quot;,&quot;conversion_async.js&quot;,&quot;8133184.fls.doubleclick.net&quot;,&quot;activityi;src=8133184;type=aa1...%2F%2Fie.rs-online.com%2Fweb%2F&quot;,&quot;p-eu.brsrvr.com&quot;,&quot;pix.gif&quot;,&quot;acct_id=6143&amp;cookie2=uid%3D726341690553%3Av%3D13.0%3Ats%3D16...&quot;,&quot;templates&quot;,&quot;feedback&quot;,&quot;default&quot;,&quot;main.css&quot;,&quot;badge___html.js&quot;,&quot;serviceunavailable___html.js&quot;,&quot;epilogue___html.js&quot;,&quot;surveycontents___html.js&quot;,&quot;accdn.lpsnmedia.net&quot;,&quot;setting&quot;,&quot;accountproperties&quot;,&quot;cb=lpCb49881x38676&quot;,&quot;le-campaigns&quot;,&quot;zones&quot;,&quot;fields=id&amp;fields=zoneValue&amp;cb=lpZonesStaticCB&quot;,&quot;n=2&amp;c=1626&amp;i=4gscdt&amp;p=prod&amp;s=14179&amp;d=8EZ7InZlcnNpb24iOiIxLjA...&quot;,&quot;googleads.g.doubleclick.net&quot;,&quot;viewthroughconversion&quot;,&quot;783976203&quot;,&quot;random=1611411210026&amp;cv=9&amp;fst=1611411210026&amp;num=1&amp;bg=ffffff&amp;...&quot;,&quot;958290131&quot;,&quot;random=1611411210074&amp;cv=9&amp;fst=1611411210074&amp;num=1&amp;bg=ffffff&amp;...&quot;,&quot;960710110&quot;,&quot;random=1611411210151&amp;cv=9&amp;fst=1611411210151&amp;num=1&amp;bg=ffffff&amp;...&quot;,&quot;random=1611411210168&amp;cv=9&amp;fst=1611411210168&amp;num=1&amp;bg=ffffff&amp;...&quot;,&quot;www.google.com&quot;,&quot;1p-user-list&quot;,&quot;random=1611411210168&amp;cv=9&amp;fst=1611410400000&amp;num=1&amp;bg=ffffff&amp;...&quot;,&quot;www.google.co.uk&quot;,&quot;random=1611411210026&amp;cv=9&amp;fst=1611410400000&amp;num=1&amp;bg=ffffff&amp;...&quot;,&quot;random=1611411210074&amp;cv=9&amp;fst=1611410400000&amp;num=1&amp;bg=ffffff&amp;...&quot;,&quot;685d5b18.akstat.io&quot;,&quot;random=1611411210151&amp;cv=9&amp;fst=1611410400000&amp;num=1&amp;bg=ffffff&amp;...&quot;,&quot;rscomponentsprod&quot;,&quot;s49117464997104&quot;]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">eumcollector/beacons/browser/v1/AD-AAB-AAF-BNE/adrum</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-type" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">text/plain</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Category Page 1" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">5000</stringProp>
              <stringProp name="ConstantTimer.delay">8000</stringProp>
              <stringProp name="TestPlan.comments">Recorded time was 8729 milliseconds</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Category Page 1" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">web/c/${Category1}/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="2084130084">Popular in the ${Category1}</stringProp>
                  <stringProp name="36787574">Glenview Industrial Estate, Herberton Road, Rialto, Dublin 12, Ireland.</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">Failed match Cat1</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cat 1 - MiniBasket" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">web/miniBasketRunningTotal.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cat 1 - SearchnBrowse" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[{&quot;operationName&quot;:&quot;getBloomreachData&quot;,&quot;variables&quot;:{&quot;locale&quot;:&quot;ie&quot;,&quot;url&quot;:&quot;https://ie.rs-online.com/web/c/batteries-chargers/&quot;},&quot;query&quot;:&quot;query getBloomreachData($locale: String!, $url: String!) {\n  bloomreachData(locale: $locale, url: $url) {\n    brIuid\n    brRelatedRid\n    relatedItems {\n      anchor\n      url\n      __typename\n    }\n    relatedCategories {\n      anchor\n      url\n      __typename\n    }\n    moreResults {\n      shortDescription\n      url\n      description\n      title\n      image\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">web/services/aggregation/search-and-browse/graphql</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="accept" elementType="Header">
                    <stringProp name="Header.name">accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="x-correlation-id" elementType="Header">
                    <stringProp name="Header.name">x-correlation-id</stringProp>
                    <stringProp name="Header.value">34586e80-fe2f-4965-9f67-e1280cacb847</stringProp>
                  </elementProp>
                  <elementProp name="Content-Language" elementType="Header">
                    <stringProp name="Header.name">Content-Language</stringProp>
                    <stringProp name="Header.value">ie</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cat 1 - MiniBasket" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">web/miniBasketRunningTotal.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cat 1 - Popular" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="mboxPage" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxPage</stringProp>
                    <stringProp name="Argument.value">fe90dd94901e4def9dbb5a6d10582976</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="mboxMCSDID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxMCSDID</stringProp>
                    <stringProp name="Argument.value">3158C11D3DD00283-618A5E2444E58849</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="screenWidth" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">screenWidth</stringProp>
                    <stringProp name="Argument.value">1280</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="mboxTime" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxTime</stringProp>
                    <stringProp name="Argument.value">1611432447287</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="page.type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">page.type</stringProp>
                    <stringProp name="Argument.value">new l1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="mboxSession" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxSession</stringProp>
                    <stringProp name="Argument.value">6b15bc771a99483d8e3c046af89966cf</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="mboxURL" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">mboxURL</stringProp>
                    <stringProp name="Argument.value">https://ie.rs-online.com/web/c/batteries-chargers/</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="webGLRenderer" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">webGLRenderer</stringProp>
                    <stringProp name="Argument.value">ANGLE (Intel(R) HD Graphics Family Direct3D11 vs_5_0 ps_5_0)</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="platform.localeCountry" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">platform.localeCountry</stringProp>
                    <stringProp name="Argument.value">ie</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="superUser.PDO0021" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">superUser.PDO0021</stringProp>
                    <stringProp name="Argument.value">P1.C1.A1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="mbox" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mbox</stringProp>
                    <stringProp name="Argument.value">target-global-mbox</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxXDomain" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxXDomain</stringProp>
                    <stringProp name="Argument.value">enabled</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="devicePixelRatio" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">devicePixelRatio</stringProp>
                    <stringProp name="Argument.value">1.5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="customerStatus" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">customerStatus</stringProp>
                    <stringProp name="Argument.value">pre-product</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="entity.category_terminal" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">entity.category_terminal</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="screenOrientation" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">screenOrientation</stringProp>
                    <stringProp name="Argument.value">landscape</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxAAMB" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxAAMB</stringProp>
                    <stringProp name="Argument.value">6G1ynYcLPuiQxYZrsz_pkqfLG9yMXBpb2zX5dvJdYQJzPXImdj0y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxReferrer" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">mboxReferrer</stringProp>
                    <stringProp name="Argument.value">https://ie.rs-online.com/web/</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxVersion" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxVersion</stringProp>
                    <stringProp name="Argument.value">1.6.4</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="user_status" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">user_status</stringProp>
                    <stringProp name="Argument.value">logged-out</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="customerStatus.currentTimeInSegment" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">customerStatus.currentTimeInSegment</stringProp>
                    <stringProp name="Argument.value">24</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxMCGVID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxMCGVID</stringProp>
                    <stringProp name="Argument.value">50690101488608681840387799995842205968</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxMCGLH" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxMCGLH</stringProp>
                    <stringProp name="Argument.value">6</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="tms.space" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tms.space</stringProp>
                    <stringProp name="Argument.value">responsiveprod</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxCount" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxCount</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="browserHeight" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">browserHeight</stringProp>
                    <stringProp name="Argument.value">610</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="screenHeight" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">screenHeight</stringProp>
                    <stringProp name="Argument.value">720</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxPC" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxPC</stringProp>
                    <stringProp name="Argument.value">6b15bc771a99483d8e3c046af89966cf.37_0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxHost" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxHost</stringProp>
                    <stringProp name="Argument.value">ie.rs-online.com</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="customerStatus.transition" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">customerStatus.transition</stringProp>
                    <stringProp name="Argument.value">none</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="profile.ecSystemId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">profile.ecSystemId</stringProp>
                    <stringProp name="Argument.value">responsive</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="entity.categoryId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">entity.categoryId</stringProp>
                    <stringProp name="Argument.value">PSSS_114891</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="browserTimeOffset" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">browserTimeOffset</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="entity.category_l2" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">entity.category_l2</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxRid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxRid</stringProp>
                    <stringProp name="Argument.value">9ad8ed6d8cf74454a79bd66e3377e93f</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="colorDepth" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">colorDepth</stringProp>
                    <stringProp name="Argument.value">24</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="browserWidth" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">browserWidth</stringProp>
                    <stringProp name="Argument.value">1263</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="entity.category_l1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">entity.category_l1</stringProp>
                    <stringProp name="Argument.value">PSSS_114891</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">m2/rscomponentsltd/mbox/json</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1270219389">Popular in the </stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">Failed recommendation cat 1</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Category Page 2" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">5000</stringProp>
              <stringProp name="ConstantTimer.delay">8000</stringProp>
              <stringProp name="TestPlan.comments">Recorded time was 10576 milliseconds</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Category Page 2" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">web/c/${Category1}/${Category2}/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1660320832">${Category2}</stringProp>
                  <stringProp name="36787574">Glenview Industrial Estate, Herberton Road, Rialto, Dublin 12, Ireland.</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">Failed match Cat 2</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cat 2 - MiniBasket" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">web/miniBasketRunningTotal.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cat 2 - SearchnBrowse" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[{&quot;operationName&quot;:&quot;getBloomreachData&quot;,&quot;variables&quot;:{&quot;locale&quot;:&quot;ie&quot;,&quot;url&quot;:&quot;https://ie.rs-online.com/web/c/batteries-chargers/battery-charger-accessories/&quot;},&quot;query&quot;:&quot;query getBloomreachData($locale: String!, $url: String!) {\n  bloomreachData(locale: $locale, url: $url) {\n    brIuid\n    brRelatedRid\n    relatedItems {\n      anchor\n      url\n      __typename\n    }\n    relatedCategories {\n      anchor\n      url\n      __typename\n    }\n    moreResults {\n      shortDescription\n      url\n      description\n      title\n      image\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">web/services/aggregation/search-and-browse/graphql</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="accept" elementType="Header">
                    <stringProp name="Header.name">accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="x-correlation-id" elementType="Header">
                    <stringProp name="Header.name">x-correlation-id</stringProp>
                    <stringProp name="Header.value">fee7de2a-c51a-422a-a46a-b7c09789a869</stringProp>
                  </elementProp>
                  <elementProp name="Content-Language" elementType="Header">
                    <stringProp name="Header.name">Content-Language</stringProp>
                    <stringProp name="Header.value">ie</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cat 2 - MiniBasket" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">web/miniBasketRunningTotal.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cat 2 - Popular" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="mboxPage" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxPage</stringProp>
                    <stringProp name="Argument.value">a5960fc7ea524f358f1df1d80aa7e7f0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="mboxMCSDID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxMCSDID</stringProp>
                    <stringProp name="Argument.value">71F4F870CE44479B-3BAFF2FD2151F435</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="screenWidth" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">screenWidth</stringProp>
                    <stringProp name="Argument.value">1280</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="mboxTime" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxTime</stringProp>
                    <stringProp name="Argument.value">1611432462370</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="page.type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">page.type</stringProp>
                    <stringProp name="Argument.value">new l2</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="mboxSession" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxSession</stringProp>
                    <stringProp name="Argument.value">6b15bc771a99483d8e3c046af89966cf</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="mboxURL" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">mboxURL</stringProp>
                    <stringProp name="Argument.value">https://ie.rs-online.com/web/c/batteries-chargers/battery-charger-accessories/</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="webGLRenderer" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">webGLRenderer</stringProp>
                    <stringProp name="Argument.value">ANGLE (Intel(R) HD Graphics Family Direct3D11 vs_5_0 ps_5_0)</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="platform.localeCountry" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">platform.localeCountry</stringProp>
                    <stringProp name="Argument.value">ie</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="superUser.PDO0021" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">superUser.PDO0021</stringProp>
                    <stringProp name="Argument.value">P1.C1.A1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="mbox" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mbox</stringProp>
                    <stringProp name="Argument.value">target-global-mbox</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxXDomain" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxXDomain</stringProp>
                    <stringProp name="Argument.value">enabled</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="devicePixelRatio" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">devicePixelRatio</stringProp>
                    <stringProp name="Argument.value">1.5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="customerStatus" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">customerStatus</stringProp>
                    <stringProp name="Argument.value">pre-product</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="entity.category_terminal" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">entity.category_terminal</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="screenOrientation" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">screenOrientation</stringProp>
                    <stringProp name="Argument.value">landscape</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxAAMB" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxAAMB</stringProp>
                    <stringProp name="Argument.value">6G1ynYcLPuiQxYZrsz_pkqfLG9yMXBpb2zX5dvJdYQJzPXImdj0y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxReferrer" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">mboxReferrer</stringProp>
                    <stringProp name="Argument.value">https://ie.rs-online.com/web/c/batteries-chargers/</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxVersion" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxVersion</stringProp>
                    <stringProp name="Argument.value">1.6.4</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="user_status" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">user_status</stringProp>
                    <stringProp name="Argument.value">logged-out</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="customerStatus.currentTimeInSegment" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">customerStatus.currentTimeInSegment</stringProp>
                    <stringProp name="Argument.value">24</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxMCGVID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxMCGVID</stringProp>
                    <stringProp name="Argument.value">50690101488608681840387799995842205968</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxMCGLH" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxMCGLH</stringProp>
                    <stringProp name="Argument.value">6</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="tms.space" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tms.space</stringProp>
                    <stringProp name="Argument.value">responsiveprod</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxCount" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxCount</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="browserHeight" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">browserHeight</stringProp>
                    <stringProp name="Argument.value">610</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="screenHeight" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">screenHeight</stringProp>
                    <stringProp name="Argument.value">720</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxPC" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxPC</stringProp>
                    <stringProp name="Argument.value">6b15bc771a99483d8e3c046af89966cf.37_0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxHost" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxHost</stringProp>
                    <stringProp name="Argument.value">ie.rs-online.com</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="customerStatus.transition" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">customerStatus.transition</stringProp>
                    <stringProp name="Argument.value">none</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="profile.ecSystemId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">profile.ecSystemId</stringProp>
                    <stringProp name="Argument.value">responsive</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="entity.categoryId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">entity.categoryId</stringProp>
                    <stringProp name="Argument.value">PSS_409422</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="browserTimeOffset" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">browserTimeOffset</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="entity.category_l2" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">entity.category_l2</stringProp>
                    <stringProp name="Argument.value">PSS_409422</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxRid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxRid</stringProp>
                    <stringProp name="Argument.value">9d3271d8e771438ab0b4dba50121e03b</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="colorDepth" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">colorDepth</stringProp>
                    <stringProp name="Argument.value">24</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="browserWidth" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">browserWidth</stringProp>
                    <stringProp name="Argument.value">1263</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="entity.category_l1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">entity.category_l1</stringProp>
                    <stringProp name="Argument.value">PSSS_114891</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">m2/rscomponentsltd/mbox/json</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1270219389">Popular in the </stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">Failed recommendation cat 2</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Category Page 3" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">5000</stringProp>
              <stringProp name="ConstantTimer.delay">8000</stringProp>
              <stringProp name="TestPlan.comments">Recorded time was 8729 milliseconds</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Category Page 3" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">web/c/${Category1}/${Category2}/${Category3}/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1660320863">${Category3}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">Failed match cat 3</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cat 3 - SearchnBrowse" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[{&quot;operationName&quot;:&quot;me&quot;,&quot;variables&quot;:{&quot;locale&quot;:&quot;ie&quot;,&quot;accessToken&quot;:&quot;&quot;},&quot;query&quot;:&quot;query me($locale: String!, $accessToken: String) {\n  me(locale: $locale, accessToken: $accessToken) {\n    role {\n      authorities\n      text\n      url\n      __typename\n    }\n    greeting\n    name\n    signIn {\n      text\n      url\n      __typename\n    }\n    signOut {\n      text\n      url\n      __typename\n    }\n    soldTo\n    __typename\n  }\n}\n&quot;},{&quot;operationName&quot;:&quot;getHeaderFooterData&quot;,&quot;variables&quot;:{&quot;locale&quot;:&quot;ie&quot;,&quot;accessToken&quot;:&quot;&quot;},&quot;query&quot;:&quot;query getHeaderFooterData($locale: String!, $accessToken: String) {\n  headerFooter(locale: $locale, accessToken: $accessToken) {\n    footer {\n      company {\n        name\n        address\n        __typename\n      }\n      contact {\n        alt\n        callCharges\n        email\n        text\n        primary\n        __typename\n      }\n      siteLinks {\n        text\n        links {\n          text\n          url\n          __typename\n        }\n        __typename\n      }\n      social {\n        text\n        links {\n          type\n          url\n          __typename\n        }\n        __typename\n      }\n      payment {\n        text\n        __typename\n      }\n      __typename\n    }\n    header {\n      accountMenu {\n        myAccount {\n          text\n          url\n          __typename\n        }\n        orderTracking {\n          text\n          url\n          __typename\n        }\n        __typename\n      }\n      browseMenu {\n        general {\n          text\n          url\n          __typename\n        }\n        categories {\n          id\n          label\n          seoUrl\n          children {\n            id\n            label\n            seoUrl\n            children {\n              id\n              label\n              binCount\n              seoUrl\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      search {\n        characterCountPreMessage\n        browse\n        mpn\n        recentlySearched\n        searchBarPlaceholder\n        characterCountPostMessage\n        searchBarMPNPlaceholder\n        predictiveTopProducts\n        browseBack\n        __typename\n      }\n      secondaryMenu {\n        general {\n          text\n          url\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;},{&quot;operationName&quot;:&quot;getTerminalNodeData&quot;,&quot;variables&quot;:{&quot;seoUrl&quot;:&quot;${Category1}/${Category2}/${Category3}&quot;,&quot;locale&quot;:&quot;ie&quot;,&quot;searchTerm&quot;:&quot;&quot;,&quot;filters&quot;:[],&quot;page&quot;:1,&quot;limit&quot;:20,&quot;sortBy&quot;:&quot;&quot;,&quot;sortType&quot;:&quot;ASC&quot;,&quot;displayCategoryContent&quot;:true},&quot;query&quot;:&quot;query getTerminalNodeData($seoUrl: String!, $locale: String!, $searchTerm: String, $filters: [String], $sortBy: String, $sortType: SortType, $displayCategoryContent: Boolean) {\n  terminalNode(seoUrl: $seoUrl, locale: $locale, searchTerm: $searchTerm, filters: $filters, sortBy: $sortBy, sortType: $sortType, displayCategoryContent: $displayCategoryContent) {\n    categoryContent {\n      pageTitle\n      seoPageTitle\n      metaDescription\n      description\n      seoPageTitle\n      __typename\n    }\n    dataBlock {\n      pageName\n      pageNode\n      superSectionId\n      sectionId\n      familyId\n      __typename\n    }\n    resultsList {\n      pagination {\n        count\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  master: terminalNode(seoUrl: $seoUrl, locale: $locale, searchTerm: $searchTerm) {\n    refinements {\n      m_id: id\n      m_label: label\n      m_type: type\n      children {\n        m_c_id: id\n        m_c_label: label\n        m_c_binCount: binCount\n        m_c_type: type\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;},{&quot;operationName&quot;:&quot;category&quot;,&quot;variables&quot;:{&quot;seoUrl&quot;:&quot;${Category1}/${Category2}/${Category3}&quot;,&quot;locale&quot;:&quot;ie&quot;,&quot;subLevels&quot;:0,&quot;superLevels&quot;:3},&quot;query&quot;:&quot;query category($seoUrl: String!, $locale: String!) {\n  category(seoUrl: $seoUrl, locale: $locale, subLevels: 0, superLevels: 3) {\n    id\n    label\n    seoUrl\n    parent {\n      id\n      label\n      seoUrl\n      parent {\n        id\n        label\n        seoUrl\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;},{&quot;operationName&quot;:&quot;labels&quot;,&quot;variables&quot;:{&quot;locale&quot;:&quot;ie&quot;},&quot;query&quot;:&quot;query labels($locale: String!) {\n  labels {\n    legacyLabels(locale: $locale) {\n      stockNumber\n      mpn\n      add\n      addError\n      productDetails\n      price\n      filters\n      hideFilters\n      showFilters\n      binCount\n      appliedFilters\n      disabledFilter\n      showResults\n      clearAtt\n      clearAll\n      viewResultsFirst\n      viewResultsSecond\n      sortBy\n      sortAsc\n      sortDesc\n      zeroResultsMsg\n      zeroResultsButton\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">web/services/aggregation/search-and-browse/graphql</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="accept" elementType="Header">
                    <stringProp name="Header.name">accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Content-Language" elementType="Header">
                    <stringProp name="Header.name">Content-Language</stringProp>
                    <stringProp name="Header.value">ie</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cat 3 - MiniBasket" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">web/miniBasketRunningTotal.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cat 3 - SearchnBrowse" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[{&quot;operationName&quot;:&quot;getTerminalResultsData&quot;,&quot;variables&quot;:{&quot;seoUrl&quot;:&quot;${Category1}/${Category2}/${Category3}&quot;,&quot;locale&quot;:&quot;ie&quot;,&quot;searchTerm&quot;:&quot;&quot;,&quot;filters&quot;:[],&quot;page&quot;:1,&quot;limit&quot;:20,&quot;sortBy&quot;:&quot;&quot;,&quot;sortType&quot;:&quot;ASC&quot;,&quot;displayCategoryContent&quot;:false},&quot;query&quot;:&quot;query getTerminalResultsData($seoUrl: String!, $locale: String!, $searchTerm: String, $filters: [String], $page: Int, $limit: Int, $sortBy: String, $sortType: SortType, $displayCategoryContent: Boolean) {\n  terminalNode(seoUrl: $seoUrl, locale: $locale, searchTerm: $searchTerm, filters: $filters, page: $page, limit: $limit, sortBy: $sortBy, sortType: $sortType, displayCategoryContent: $displayCategoryContent) {\n    resultsList {\n      pagination {\n        count\n        limit\n        page\n        lastPage\n        __typename\n      }\n      columnHeaders\n      records {\n        id\n        name\n        image\n        productUrl\n        brandUrl\n        stockNumber\n        mpn\n        breakPrice\n        breakQuantity\n        uomMessage\n        specificationAttributes {\n          key\n          value\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;},{&quot;operationName&quot;:&quot;getTerminalNodeRefinementUpdate&quot;,&quot;variables&quot;:{&quot;seoUrl&quot;:&quot;${Category1}/${Category2}/${Category3}&quot;,&quot;locale&quot;:&quot;ie&quot;,&quot;searchTerm&quot;:&quot;&quot;,&quot;filters&quot;:[],&quot;page&quot;:1,&quot;limit&quot;:0,&quot;sortBy&quot;:&quot;&quot;,&quot;sortType&quot;:&quot;ASC&quot;,&quot;displayCategoryContent&quot;:false},&quot;query&quot;:&quot;query getTerminalNodeRefinementUpdate($seoUrl: String!, $locale: String!, $searchTerm: String, $filters: [String], $sortBy: String, $sortType: SortType, $displayCategoryContent: Boolean, $limit: Int) {\n  terminalNode(seoUrl: $seoUrl, locale: $locale, searchTerm: $searchTerm, filters: $filters, sortBy: $sortBy, sortType: $sortType, displayCategoryContent: $displayCategoryContent, limit: $limit) {\n    appliedFilters {\n      a_u_id: id\n      a_u_label: label\n      a_u_binCount: binCount\n      a_u_type: type\n      children {\n        a_u_c_id: id\n        a_u_c_label: label\n        a_u_c_binCount: binCount\n        a_u_c_type: type\n        __typename\n      }\n      __typename\n    }\n    refinements {\n      r_u_id: id\n      r_u_label: label\n      r_u_type: type\n      children {\n        r_u_c_id: id\n        r_u_c_label: label\n        r_u_c_binCount: binCount\n        r_u_c_type: type\n        __typename\n      }\n      __typename\n    }\n    resultsList {\n      pagination {\n        r_u_p_count: count\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">web/services/aggregation/search-and-browse/graphql</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="accept" elementType="Header">
                    <stringProp name="Header.name">accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Content-Language" elementType="Header">
                    <stringProp name="Header.name">Content-Language</stringProp>
                    <stringProp name="Header.value">ie</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor for Product ID" enabled="true">
                <stringProp name="TestPlan.comments">CApture Product ID</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">RegItemID</stringProp>
                <stringProp name="RegexExtractor.regex">/web/p/${Category3}/(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cat 3 - Recommendation" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="mboxPage" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxPage</stringProp>
                    <stringProp name="Argument.value">422e8e3584b24d86a826a007cb22d82b</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="mboxMCSDID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxMCSDID</stringProp>
                    <stringProp name="Argument.value">667E294DB0806CB5-2C3A2154DD3E6D1D</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="screenWidth" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">screenWidth</stringProp>
                    <stringProp name="Argument.value">1280</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="mboxTime" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxTime</stringProp>
                    <stringProp name="Argument.value">1611432474713</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="page.type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">page.type</stringProp>
                    <stringProp name="Argument.value">new tn</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="mboxSession" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxSession</stringProp>
                    <stringProp name="Argument.value">6b15bc771a99483d8e3c046af89966cf</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="mboxURL" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">mboxURL</stringProp>
                    <stringProp name="Argument.value">https://ie.rs-online.com/web/c/batteries-chargers/battery-charger-accessories/battery-charger-leads/</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="webGLRenderer" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">webGLRenderer</stringProp>
                    <stringProp name="Argument.value">ANGLE (Intel(R) HD Graphics Family Direct3D11 vs_5_0 ps_5_0)</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="platform.localeCountry" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">platform.localeCountry</stringProp>
                    <stringProp name="Argument.value">ie</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="superUser.PDO0021" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">superUser.PDO0021</stringProp>
                    <stringProp name="Argument.value">P1.C1.A1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="mbox" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mbox</stringProp>
                    <stringProp name="Argument.value">target-global-mbox</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxXDomain" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxXDomain</stringProp>
                    <stringProp name="Argument.value">enabled</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="devicePixelRatio" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">devicePixelRatio</stringProp>
                    <stringProp name="Argument.value">1.5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="customerStatus" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">customerStatus</stringProp>
                    <stringProp name="Argument.value">browsing</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="entity.category_terminal" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">entity.category_terminal</stringProp>
                    <stringProp name="Argument.value">PSF_409434</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="screenOrientation" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">screenOrientation</stringProp>
                    <stringProp name="Argument.value">landscape</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxAAMB" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxAAMB</stringProp>
                    <stringProp name="Argument.value">6G1ynYcLPuiQxYZrsz_pkqfLG9yMXBpb2zX5dvJdYQJzPXImdj0y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxReferrer" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">mboxReferrer</stringProp>
                    <stringProp name="Argument.value">https://ie.rs-online.com/web/c/batteries-chargers/battery-charger-accessories/</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxVersion" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxVersion</stringProp>
                    <stringProp name="Argument.value">1.6.4</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="user_status" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">user_status</stringProp>
                    <stringProp name="Argument.value">logged-out</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="customerStatus.currentTimeInSegment" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">customerStatus.currentTimeInSegment</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxMCGVID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxMCGVID</stringProp>
                    <stringProp name="Argument.value">50690101488608681840387799995842205968</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxMCGLH" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxMCGLH</stringProp>
                    <stringProp name="Argument.value">6</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="tms.space" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tms.space</stringProp>
                    <stringProp name="Argument.value">responsiveprod</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxCount" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxCount</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="browserHeight" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">browserHeight</stringProp>
                    <stringProp name="Argument.value">610</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="screenHeight" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">screenHeight</stringProp>
                    <stringProp name="Argument.value">720</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxPC" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxPC</stringProp>
                    <stringProp name="Argument.value">6b15bc771a99483d8e3c046af89966cf.37_0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="customerStatus.previousTimeInSegment" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">customerStatus.previousTimeInSegment</stringProp>
                    <stringProp name="Argument.value">24</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxHost" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxHost</stringProp>
                    <stringProp name="Argument.value">ie.rs-online.com</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="customerStatus.transition" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">customerStatus.transition</stringProp>
                    <stringProp name="Argument.value">progression</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="customerStatus.previousSegment" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">customerStatus.previousSegment</stringProp>
                    <stringProp name="Argument.value">pre-product</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="profile.ecSystemId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">profile.ecSystemId</stringProp>
                    <stringProp name="Argument.value">responsive</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="entity.categoryId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">entity.categoryId</stringProp>
                    <stringProp name="Argument.value">PSF_409434</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="browserTimeOffset" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">browserTimeOffset</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="entity.category_l2" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">entity.category_l2</stringProp>
                    <stringProp name="Argument.value">PSS_409422</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxRid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">mboxRid</stringProp>
                    <stringProp name="Argument.value">d627886a760a472aa5ade71fe9e1ba09</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="colorDepth" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">colorDepth</stringProp>
                    <stringProp name="Argument.value">24</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="browserWidth" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">browserWidth</stringProp>
                    <stringProp name="Argument.value">1263</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="entity.category_l1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">entity.category_l1</stringProp>
                    <stringProp name="Argument.value">PSSS_114891</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">m2/rscomponentsltd/mbox/json</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Product Page" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">5000</stringProp>
              <stringProp name="ConstantTimer.delay">8000</stringProp>
              <stringProp name="TestPlan.comments">Recorded time was 8729 milliseconds</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Product Page" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">web/p/${Category3}/${RegItemID}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="39100547">Legislation and Compliance</stringProp>
                  <stringProp name="36787574">Glenview Industrial Estate, Herberton Road, Rialto, Dublin 12, Ireland.</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">Failed match product page</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Prod - MiniBasket" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">web/miniBasketRunningTotal.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Prod - SearchnBrowse" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[{&quot;operationName&quot;:&quot;addToBasket&quot;,&quot;variables&quot;:{&quot;locale&quot;:&quot;ie&quot;,&quot;articleId&quot;:&quot;${RegItemID}&quot;,&quot;cartId&quot;:&quot;&quot;,&quot;jSessionId&quot;:&quot;AaOgQtLcT4UFcLqm0dYhMdDB.059&quot;,&quot;quantity&quot;:1,&quot;appendQty&quot;:false},&quot;query&quot;:&quot;mutation addToBasket($locale: String!, $articleId: String!, $cartId: String, $jSessionId: String, $quantity: Int!, $appendQty: Boolean) {\n  addToBasket(locale: $locale, articleId: $articleId, cartId: $cartId, jSessionId: $jSessionId, quantity: $quantity, appendQty: $appendQty) {\n    basketId\n    jSessionId\n    cartItemCount\n    __typename\n  }\n}\n&quot;}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">web/services/aggregation/search-and-browse/graphql</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="accept" elementType="Header">
                    <stringProp name="Header.name">accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Content-Language" elementType="Header">
                    <stringProp name="Header.name">Content-Language</stringProp>
                    <stringProp name="Header.value">ie</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Prod - MiniBasket" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">web/miniBasketRunningTotal.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="adrum" elementType="Header">
                    <stringProp name="Header.name">adrum</stringProp>
                    <stringProp name="Header.value">isAjax:true</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Prod - Schema" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[{&quot;operationName&quot;:&quot;addToBasket&quot;,&quot;variables&quot;:{&quot;host&quot;:&quot;https://ie.rs-online.com&quot;,&quot;locale&quot;:&quot;ie&quot;,&quot;articleId&quot;:&quot;4589361&quot;,&quot;articleQty&quot;:1,&quot;appendQty&quot;:false},&quot;query&quot;:&quot;mutation addToBasket($host: String!, $locale: String!, $articleId: String!, $articleQty: Int!, $appendQty: Boolean!) {\n  addToBasket(host: $host, locale: $locale, articleId: $articleId, articleQty: $articleQty, appendQty: $appendQty) {\n    basketId\n    jSessionId\n    cartItemCount\n    __typename\n  }\n}\n&quot;}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">web/p/schema/graphql</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="accept" elementType="Header">
                    <stringProp name="Header.name">accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Prod - Used" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="mboxTime" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">mboxTime</stringProp>
                    <stringProp name="Argument.value">1611432486071</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="webGLRenderer" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">webGLRenderer</stringProp>
                    <stringProp name="Argument.value">ANGLE (Intel(R) HD Graphics Family Direct3D11 vs_5_0 ps_5_0)</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="platform.localeCountry" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">platform.localeCountry</stringProp>
                    <stringProp name="Argument.value">ie</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="entity.MarketPriceFormatted" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">entity.MarketPriceFormatted</stringProp>
                    <stringProp name="Argument.value">â‚¬2.93</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="mbox" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">mbox</stringProp>
                    <stringProp name="Argument.value">target-global-mbox</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="mboxXDomain" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">mboxXDomain</stringProp>
                    <stringProp name="Argument.value">enabled</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="entity.name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">entity.name</stringProp>
                    <stringProp name="Argument.value">Ansmann 0160-3160-520 Battery Charger Lead for Arduino Uno from model racing type battery packs Charger</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="mboxReferrer" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">mboxReferrer</stringProp>
                    <stringProp name="Argument.value">https://ie.rs-online.com/web/c/batteries-chargers/battery-charger-accessories/battery-charger-leads/</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="entity.brand" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">entity.brand</stringProp>
                    <stringProp name="Argument.value">Ansmann</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="entity.stock_number" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">entity.stock_number</stringProp>
                    <stringProp name="Argument.value">791-8270</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="entity.pageURL" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">entity.pageURL</stringProp>
                    <stringProp name="Argument.value">/web/p/battery-charger-leads/7918270</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="entity.productName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">entity.productName</stringProp>
                    <stringProp name="Argument.value">Ansmann 0160-3160-520 Battery Charger Lead for Arduino Uno from model racing type battery packs Charger</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="entity.value" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">entity.value</stringProp>
                    <stringProp name="Argument.value">2.93</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="customerStatus.currentTimeInSegment" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">customerStatus.currentTimeInSegment</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxMCGVID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">mboxMCGVID</stringProp>
                    <stringProp name="Argument.value">50690101488608681840387799995842205968</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="entity.CountryCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">entity.CountryCode</stringProp>
                    <stringProp name="Argument.value">ie</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxCount" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">mboxCount</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="browserHeight" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">browserHeight</stringProp>
                    <stringProp name="Argument.value">610</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="entity.BaseUrl" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">entity.BaseUrl</stringProp>
                    <stringProp name="Argument.value">https://ie.rs-online.com</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxPC" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">mboxPC</stringProp>
                    <stringProp name="Argument.value">6b15bc771a99483d8e3c046af89966cf.37_0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="user.categoryId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">user.categoryId</stringProp>
                    <stringProp name="Argument.value">PSSS_114891,PSS_409422,PSF_409434,Brand_Ansmann</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="entity.minimumOrderQuantity" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">entity.minimumOrderQuantity</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxHost" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">mboxHost</stringProp>
                    <stringProp name="Argument.value">ie.rs-online.com</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="entity.thumbnailURL" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">entity.thumbnailURL</stringProp>
                    <stringProp name="Argument.value">https://media.rs-online.com/t_thumb100/F7918270-01.jpg</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="entity.category_l2" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">entity.category_l2</stringProp>
                    <stringProp name="Argument.value">PSS_409422</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="entity.catalogue" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">entity.catalogue</stringProp>
                    <stringProp name="Argument.value">core</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="entity.Currency" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">entity.Currency</stringProp>
                    <stringProp name="Argument.value">EUR</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="entity.category_l1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">entity.category_l1</stringProp>
                    <stringProp name="Argument.value">PSSS_114891</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxPage" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">mboxPage</stringProp>
                    <stringProp name="Argument.value">c25f4cff7a0f440ea2580f678bb503e2</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxMCSDID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">mboxMCSDID</stringProp>
                    <stringProp name="Argument.value">2F50F2116A4C55D9-18ED14E1EFF81DE9</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="screenWidth" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">screenWidth</stringProp>
                    <stringProp name="Argument.value">1280</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="page.type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">page.type</stringProp>
                    <stringProp name="Argument.value">new product</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxSession" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">mboxSession</stringProp>
                    <stringProp name="Argument.value">6b15bc771a99483d8e3c046af89966cf</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxURL" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">mboxURL</stringProp>
                    <stringProp name="Argument.value">https://ie.rs-online.com/web/p/battery-charger-leads/7918270</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="entity.packQuantity" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">entity.packQuantity</stringProp>
                    <stringProp name="Argument.value">Each</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="superUser.PDO0021" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">superUser.PDO0021</stringProp>
                    <stringProp name="Argument.value">P1.C1.A1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="devicePixelRatio" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">devicePixelRatio</stringProp>
                    <stringProp name="Argument.value">1.5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="customerStatus" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">customerStatus</stringProp>
                    <stringProp name="Argument.value">browsing</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="entity.category_terminal" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">entity.category_terminal</stringProp>
                    <stringProp name="Argument.value">PSF_409434</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="screenOrientation" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">screenOrientation</stringProp>
                    <stringProp name="Argument.value">landscape</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxAAMB" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">mboxAAMB</stringProp>
                    <stringProp name="Argument.value">6G1ynYcLPuiQxYZrsz_pkqfLG9yMXBpb2zX5dvJdYQJzPXImdj0y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="entity.MarketPrice" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">entity.MarketPrice</stringProp>
                    <stringProp name="Argument.value">2.93</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="entity.id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">entity.id</stringProp>
                    <stringProp name="Argument.value">7918270</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxVersion" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">mboxVersion</stringProp>
                    <stringProp name="Argument.value">1.6.4</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="user_status" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">user_status</stringProp>
                    <stringProp name="Argument.value">logged-out</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxMCGLH" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">mboxMCGLH</stringProp>
                    <stringProp name="Argument.value">6</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="tms.space" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">tms.space</stringProp>
                    <stringProp name="Argument.value">responsiveprod</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="screenHeight" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">screenHeight</stringProp>
                    <stringProp name="Argument.value">720</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="entity.StockStatus" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">entity.StockStatus</stringProp>
                    <stringProp name="Argument.value">in stock</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="customerStatus.transition" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">customerStatus.transition</stringProp>
                    <stringProp name="Argument.value">none</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="profile.ecSystemId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">profile.ecSystemId</stringProp>
                    <stringProp name="Argument.value">responsive</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="entity.categoryId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">entity.categoryId</stringProp>
                    <stringProp name="Argument.value">PSSS_114891,PSS_409422,PSF_409434,Brand_Ansmann</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="browserTimeOffset" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">browserTimeOffset</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="mboxRid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">mboxRid</stringProp>
                    <stringProp name="Argument.value">79c8b6de73104699be8af81823037ea0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="entity.inventory" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">entity.inventory</stringProp>
                    <stringProp name="Argument.value">100</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="colorDepth" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">colorDepth</stringProp>
                    <stringProp name="Argument.value">24</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="browserWidth" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">browserWidth</stringProp>
                    <stringProp name="Argument.value">1263</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">m2/rscomponentsltd/mbox/json</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="650201872">Accessories</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">Failed recommendation prod</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Basket Page" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">5000</stringProp>
              <stringProp name="ConstantTimer.delay">8000</stringProp>
              <stringProp name="TestPlan.comments">Recorded time was 11510 milliseconds</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Basket - URL" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">web/ca/basketsummary/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-990402886">My Basket</stringProp>
                  <stringProp name="-1933500472">delivery address</stringProp>
                  <stringProp name="36787574">Glenview Industrial Estate, Herberton Road, Rialto, Dublin 12, Ireland.</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">Failed match Basket</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Basket - MiniBasket" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">web/miniBasketRunningTotal.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">D:\RS Components\Result\Result_2601_1400\ResultTree.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TransactionsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Transactions per Second" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">D:\RS Components\Result\Result_2601_1400\TPS.csv</stringProp>
          <longProp name="interval_grouping">60000</longProp>
          <boolProp name="graph_aggregated">true</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ThreadsStateOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Active Threads Over Time" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">D:\RS Components\Result\Result_2601_1400\ActiveThread.csv</stringProp>
          <longProp name="interval_grouping">100</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.BytesThroughputOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Bytes Throughput Over Time" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">D:\RS Components\Result\Result_2601_1400\ByteThrougput.csv</stringProp>
          <longProp name="interval_grouping">1000</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
        <Summariser guiclass="SummariserGui" testclass="Summariser" testname="Generate Summary Results" enabled="true"/>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">D:\RS Components\Result\Result_2601_1400\RampTestSummary_2601_1400.jtl</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">D:\RS Components\Result\Result_2601_1400\ResultinTable.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">D:\RS Components\Result\Result_2601_1400\ResponseTime.csv</stringProp>
          <stringProp name="RespTimeGraph.interval">30</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">D:\RS Components\Result\Result_2601_1400\AggregateReport.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">D:\RS Components\Result\Result_2601_1400\Graph.csv</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
